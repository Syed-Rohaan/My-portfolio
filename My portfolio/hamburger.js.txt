// Hamburger Menu Controller
class HamburgerMenu {
    constructor() {
        this.hamburgerBtn = document.getElementById('hamburgerBtn');
        this.mobileDropdown = document.getElementById('mobileDropdown');
        this.menuOverlay = document.getElementById('menuOverlay');
        this.mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
        
        this.isOpen = false;
        this.animationDuration = 400; // matches CSS transition
        
        this.init();
    }

    init() {
        this.bindEvents();
        this.setupAccessibility();
        this.setupKeyboardNavigation();
    }

    bindEvents() {
        // Hamburger button click
        this.hamburgerBtn.addEventListener('click', (e) => {
            e.preventDefault();
            this.toggle();
        });

        // Overlay click to close
        this.menuOverlay.addEventListener('click', () => {
            this.close();
        });

        // Mobile nav link clicks
        this.mobileNavLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                // Add click animation
                this.animateClick(link);
                
                // Close menu after a short delay for smooth UX
                setTimeout(() => {
                    this.close();
                }, 150);
            });
        });

        // Close menu on window resize if open
        window.addEventListener('resize', () => {
            if (window.innerWidth >= 768 && this.isOpen) {
                this.close();
            }
        });

        // Handle escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isOpen) {
                this.close();
                this.hamburgerBtn.focus();
            }
        });

        // Prevent body scroll when menu is open
        document.addEventListener('touchmove', (e) => {
            if (this.isOpen && !this.mobileDropdown.contains(e.target)) {
                e.preventDefault();
            }
        }, { passive: false });
    }

    setupAccessibility() {
        // Set initial ARIA attributes
        this.hamburgerBtn.setAttribute('aria-expanded', 'false');
        this.hamburgerBtn.setAttribute('aria-controls', 'mobileDropdown');
        this.mobileDropdown.setAttribute('aria-hidden', 'true');
        this.mobileDropdown.setAttribute('role', 'menu');

        // Add role to nav links
        this.mobileNavLinks.forEach(link => {
            link.setAttribute('role', 'menuitem');
        });
    }

    setupKeyboardNavigation() {
        // Tab navigation within menu
        this.mobileDropdown.addEventListener('keydown', (e) => {
            if (!this.isOpen) return;

            const focusableElements = this.mobileDropdown.querySelectorAll(
                'a, button, [tabindex]:not([tabindex="-1"])'
            );
            const firstElement = focusableElements[0];
            const lastElement = focusableElements[focusableElements.length - 1];

            if (e.key === 'Tab') {
                if (e.shiftKey) {
                    // Shift + Tab
                    if (document.activeElement === firstElement) {
                        e.preventDefault();
                        lastElement.focus();
                    }
                } else {
                    // Tab
                    if (document.activeElement === lastElement) {
                        e.preventDefault();
                        firstElement.focus();
                    }
                }
            }
        });
    }

    toggle() {
        if (this.isOpen) {
            this.close();
        } else {
            this.open();
        }
    }

    open() {
        if (this.isOpen) return;

        this.isOpen = true;
        
        // Update classes
        this.hamburgerBtn.classList.add('active');
        this.mobileDropdown.classList.add('active');
        this.menuOverlay.classList.add('active');
        
        // Update ARIA attributes
        this.hamburgerBtn.setAttribute('aria-expanded', 'true');
        this.mobileDropdown.setAttribute('aria-hidden', 'false');
        
        // Prevent body scroll
        document.body.style.overflow = 'hidden';
        
        // Focus first menu item after animation
        setTimeout(() => {
            const firstNavLink = this.mobileNavLinks[0];
            if (firstNavLink) {
                firstNavLink.focus();
            }
        }, this.animationDuration);

        // Trigger entrance animations
        this.triggerEntranceAnimations();

        // Analytics tracking (if needed)
        this.trackEvent('menu_opened');
    }

    close() {
        if (!this.isOpen) return;

        this.isOpen = false;
        
        // Update classes
        this.hamburgerBtn.classList.remove('active');
        this.mobileDropdown.classList.remove('active');
        this.menuOverlay.classList.remove('active');
        
        // Update ARIA attributes
        this.hamburgerBtn.setAttribute('aria-expanded', 'false');
        this.mobileDropdown.setAttribute('aria-hidden', 'true');
        
        // Restore body scroll
        document.body.style.overflow = '';

        // Analytics tracking (if needed)
        this.trackEvent('menu_closed');
    }

    triggerEntranceAnimations() {
        // Reset and trigger animations for nav links
        this.mobileNavLinks.forEach((link, index) => {
            link.style.animation = 'none';
            link.offsetHeight; // Force reflow
            link.style.animation = `slideInLeft 0.6s ease-out ${0.1 + index * 0.1}s forwards`;
        });

        // Animate divider
        const divider = document.querySelector('.dropdown-divider');
        if (divider) {
            divider.style.animation = 'none';
            divider.offsetHeight;
            divider.style.animation = 'fadeIn 0.6s ease-out 0.7s forwards';
        }

        // Animate social section
        const socialSection = document.querySelector('.social-section');
        if (socialSection) {
            socialSection.style.animation = 'none';
            socialSection.offsetHeight;
            socialSection.style.animation = 'slideInUp 0.6s ease-out 0.8s forwards';
        }

        // Animate CTA section
        const ctaSection = document.querySelector('.cta-section');
        if (ctaSection) {
            ctaSection.style.animation = 'none';
            ctaSection.offsetHeight;
            ctaSection.style.animation = 'slideInUp 0.6s ease-out 0.9s forwards';
        }
    }

    animateClick(element) {
        // Add click animation class
        element.style.transform = 'translateX(5px) scale(0.98)';
        
        setTimeout(() => {
            element.style.transform = '';
        }, 150);
    }

    trackEvent(eventName) {
        // Analytics tracking - replace with your analytics service
        if (typeof gtag !== 'undefined') {
            gtag('event', eventName, {
                event_category: 'Navigation',
                event_label: 'Mobile Menu'
            });
        }
        
        // Console log for debugging
        console.log(`Menu Event: ${eventName}`);
    }

    // Public methods for external control
    forceClose() {
        this.close();
    }

    forceOpen() {
        this.open();
    }

    getState() {
        return {
            isOpen: this.isOpen,
            hamburgerBtn: this.hamburgerBtn,
            mobileDropdown: this.mobileDropdown
        };
    }
}

// Enhanced scroll behavior
class ScrollHandler {
    constructor() {
        this.header = document.querySelector('.demo-header');
        this.lastScrollY = window.scrollY;
        this.scrollThreshold = 100;
        
        this.init();
    }

    init() {
        window.addEventListener('scroll', this.handleScroll.bind(this), { passive: true });
    }

    handleScroll() {
        const currentScrollY = window.scrollY;
        
        // Add scrolled class for styling
        if (currentScrollY > 20) {
            this.header.classList.add('scrolled');
        } else {
            this.header.classList.remove('scrolled');
        }

        // Hide/show header on scroll (optional)
        if (Math.abs(currentScrollY - this.lastScrollY) > this.scrollThreshold) {
            if (currentScrollY > this.lastScrollY && currentScrollY > 200) {
                // Scrolling down
                this.header.style.transform = 'translateY(-100%)';
            } else {
                // Scrolling up
                this.header.style.transform = 'translateY(0)';
            }
            
            this.lastScrollY = currentScrollY;
        }
    }
}

// Smooth scroll for anchor links
class SmoothScroll {
    constructor() {
        this.init();
    }

    init() {
        // Handle all anchor links
        document.addEventListener('click', (e) => {
            const link = e.target.closest('a[href^="#"]');
            if (link) {
                e.preventDefault();
                const targetId = link.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                
                if (targetElement) {
                    const headerHeight = document.querySelector('.demo-header').offsetHeight;
                    const targetPosition = targetElement.offsetTop - headerHeight;
                    
                    window.scrollTo({
                        top: targetPosition,
                        behavior: 'smooth'
                    });
                }
            }
        });
    }
}

// Performance optimization
class PerformanceOptimizer {
    constructor() {
        this.init();
    }

    init() {
        // Preload critical resources
        this.preloadResources();
        
        // Optimize animations for low-end devices
        this.optimizeAnimations();
        
        // Setup intersection observer for animations
        this.setupIntersectionObserver();
    }

    preloadResources() {
        // Preload any critical CSS or images
        const preloadLinks = [
            // Add any resources that need preloading
        ];

        preloadLinks.forEach(href => {
            const link = document.createElement('link');
            link.rel = 'preload';
            link.href = href;
            link.as = 'style';
            document.head.appendChild(link);
        });
    }

    optimizeAnimations() {
        // Reduce animations on low-end devices
        if (navigator.hardwareConcurrency && navigator.hardwareConcurrency < 4) {
            document.documentElement.style.setProperty('--animation-duration', '0.2s');
        }

        // Respect user's motion preferences
        if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
            document.documentElement.style.setProperty('--animation-duration', '0.01ms');
        }
    }

    setupIntersectionObserver() {
        // Observe elements for entrance animations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate-in');
                    observer.unobserve(entry.target);
                }
            });
        }, observerOptions);

        // Observe elements that need animation
        const animateElements = document.querySelectorAll('.animate-on-scroll');
        animateElements.forEach(el => observer.observe(el));
    }
}

// Error handling and fallbacks
class ErrorHandler {
    constructor() {
        this.init();
    }

    init() {
        // Global error handling
        window.addEventListener('error', this.handleError.bind(this));
        window.addEventListener('unhandledrejection', this.handlePromiseRejection.bind(this));
    }

    handleError(event) {
        console.error('JavaScript Error:', event.error);
        // You could send this to an error reporting service
        this.showUserFriendlyError();
    }

    handlePromiseRejection(event) {
        console.error('Unhandled Promise Rejection:', event.reason);
        // You could send this to an error reporting service
    }

    showUserFriendlyError() {
        // Show a user-friendly error message
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-notification';
        errorMessage.innerHTML = `
            <div style="
                position: fixed;
                top: 20px;
                right: 20px;
                background: #ef4444;
                color: white;
                padding: 1rem;
                border-radius: 0.5rem;
                z-index: 10000;
                max-width: 300px;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            ">
                Something went wrong. Please refresh the page.
            </div>
        `;
        
        document.body.appendChild(errorMessage);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            errorMessage.remove();
        }, 5000);
    }
}

// Initialize everything when DOM is ready
function initializeApp() {
    // Core functionality
    const hamburgerMenu = new HamburgerMenu();
    const scrollHandler = new ScrollHandler();
    const smoothScroll = new SmoothScroll();
    
    // Performance and error handling
    const performanceOptimizer = new PerformanceOptimizer();
    const errorHandler = new ErrorHandler();
    
    // Make hamburger menu globally accessible for debugging
    window.hamburgerMenu = hamburgerMenu;
    
    // Add loaded class to body
    document.body.classList.add('loaded');
    
    console.log('Hamburger Menu App Initialized Successfully');
}

// Wait for DOM to be ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    initializeApp();
}

// Export for module systems (if needed)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        HamburgerMenu,
        ScrollHandler,
        SmoothScroll,
        PerformanceOptimizer,
        ErrorHandler
    };
}